// Spring Boot 3.5.x + Gradle(Groovy) 프로젝트의 build.gradle
// - 목적: JPA + Web 사용의 표준 서버 애플리케이션 프로젝트 기본 설정
plugins {
	// 자바 프로젝트임을 선언 - Gradle이 Java 소스 컴파일/테스트/패키징 태스크를 인지하도록 함
	id 'java'
	// 스프링부트 실행 테스크와 자동 설정을 제공(프로젝트가 사용하는 Spring Boot 버전과 반드시 일치)
	id 'org.springframework.boot' version '3.5.4'
	// 스프링부트 의존성 버전 관리를 위임
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example' // Maven 그룹 ID (프로젝트 패키지)
version = '0.0.1-SNAPSHOT' // 애플리케이션 버전

java {
	// 컴파일러/런타임 JDK 버전을 고정 (로컬에 17버전이 없으면 Gradle이 자동 설치/사용 가능)
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	// 컴파일 시에만 필요한 의존성 (EX. Lombok)
	compileOnly {
		extendsFrom annotationProcessor // 어노테이션 처리도 함께 사용하는 설정
	}
}

repositories {
	// 의존성 중앙 저장소 - 대부분 라이브러리가 mavenCentral()에서 다운로드됨
	mavenCentral()
}

dependencies {
	/********************* 애플리케이션 의존성 *********************/

	// Spring Data JPA 스타터
	// - JPA 표준 + Hibernate ORM + HikariCP(커넥션 풀) + 트랜잭션 등 포함
	// - 엔티티 매핑, 리포지토리(Repository) 인터페이스 기반 CRUD 지원
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Spring Web 스타터
	// - Spring MVC + Embedded Tomcat(기본) + Jackson(JSON 직렬화) 포함
	// - REST API, 컨트롤러(@RestController) 작성의 기본
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring Web Validation 스타터
	// - 데이터 유효성 검사를 위한 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//Spring Web Security 스타터
	// - 보안 처리를 위한 의존성 추가
 	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// JWT 의존성  추가
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Java 8 시간/날짜 직렬화
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'

	// Lombok(컴파일 전용)
	// - @Getter/@Setter/@Builder 등 반복 코드를 컴파일 타임에 자동 생성
	// - 런타임에는 필요하지 않으므로 compileOnly 로 의존성 최소화(최종 JAR 크기↓)
	compileOnly 'org.projectlombok:lombok'

	// Lombok 애노테이션 프로세서
	// - Lombok이 소스 코드를 생성하게 만드는 실제 '처리기'
	// - IntelliJ 사용 시 "Annotation Processing" 활성화 필요
	annotationProcessor 'org.projectlombok:lombok'

	// H2 데이터베이스(런타임 전용)
	// - 인메모리 DB. 로컬 개발/테스트용으로 가볍고 초기 설정이 쉬움
	// - spring.datasource.* 미설정 + H2 존재 시, Boot가 임베디드 DataSource 자동 구성
	runtimeOnly 'com.h2database:h2'

	// H2 데이터베이스(런타임 전용)
	// - 인메모리 DB. 로컬 개발/테스트용으로 가볍고 초기 설정이 쉬움
	// - spring.datasource.* 미설정 + H2 존재 시, Boot가 임베디드 DataSource 자동 구성
	runtimeOnly 'com.mysql:mysql-connector-j'

	// === 테스트 의존성 === //
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
